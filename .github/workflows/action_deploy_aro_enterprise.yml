name: ARO enterprise architecture
on: [workflow_dispatch]
env:
  LOCATION: australiaeast
  ACR_USERNAME: 00000000-0000-0000-0000-000000000000
  CONTAINER_BUILD_NAME: aro_config:1

jobs: 
  vault_and_identity:
    runs-on: ubuntu-latest
    outputs:
      identityClientId: ${{ steps.identity.outputs.identityClientId }}
      identityObjectId: ${{ steps.identity.outputs.identityObjectId }}
      identityName: ${{ steps.identity.outputs.identityName }}
      keyVaultUri: ${{ steps.keyvault.outputs.keyVaultUri }}
      keyVaultName: ${{ steps.keyvault.outputs.keyVaultName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: create identity
      uses: azure/arm-deploy@v1
      id: identity
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/managed-identity.bicep
        parameters: >
          ./action_params/managed-identity.parameters.json
          location="${{ env.LOCATION }}"
        deploymentName: identity-github-actions

    - name: create Keyvault
      uses: azure/arm-deploy@v1
      id: keyvault
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/keyvault.bicep
        parameters: >
          ./action_params/keyvault.parameters.json
          location="${{ env.LOCATION }}"
          identityObjectId=${{ steps.identity.outputs.identityObjectId }}
          spObjectId=${{ secrets.AAD_OBJECT_ID }}
        deploymentName: keyvault-github-actions

  storage_account:
    runs-on: ubuntu-latest
    outputs:
      blobEndpoint: ${{ steps.storage.outputs.blobEndpoint }}
      blobContainerName: ${{ steps.storage.outputs.blobContainerName }}
      fileName: ${{ steps.storage.outputs.fileName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: create storage account
      uses: azure/arm-deploy@v1
      id: storage
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/storage.bicep
        parameters: >
          ./action_params/storage.parameters.json
          location="${{ env.LOCATION }}"
          aadObjectId="${{ secrets.AAD_OBJECT_ID }}"
        deploymentName: storage-github-actions

  hub_networking:
    runs-on: ubuntu-latest
    outputs:
      hubVnetName: ${{ steps.hub.outputs.hubVnetName }}
      aciSubnetName: ${{ steps.hub.outputs.aciSubnetName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: hub networking
      uses: azure/arm-deploy@v1
      id: hub
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/hub_network.bicep
        parameters: >
          ./action_params/hub_network.parameters.json
          location="${{ env.LOCATION }}"
        deploymentName: hub-networking-github-actions

  deploy_firewall:
    needs: hub_networking
    runs-on: ubuntu-latest
    outputs:
      fwPrivateIP: ${{ steps.firewall.outputs.fwPrivateIP }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: deploy_firewall
      uses: azure/arm-deploy@v1
      id: firewall
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/firewall.bicep
        parameters: >
          ./action_params/firewall.parameters.json
          location="${{ env.LOCATION }}"
          hubVnetName="${{ needs.hub_networking.outputs.hubVnetName }}"
        deploymentName: firewall-github-actions

  user_defined_routing:
    needs: deploy_firewall
    runs-on: ubuntu-latest
    outputs:
      routeTableName: ${{ steps.route_table.outputs.routeTableName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: create_route
      uses: azure/arm-deploy@v1
      id: route_table
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.SPOKE_RG }}
        template: ./modules/routing_table.bicep
        parameters: >
          ./action_params/routing.parameters.json
          location="${{ env.LOCATION }}"
          fwPrivateIP="${{ needs.deploy_firewall.outputs.fwPrivateIP }}"
        deploymentName: udr-github-actions
    
  spoke_networking:
    needs: user_defined_routing
    runs-on: ubuntu-latest
    outputs:
      spokeVnetName: ${{ steps.spoke.outputs.spokeVnetName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: spoke networking
      uses: azure/arm-deploy@v1
      id: spoke
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.SPOKE_RG }}
        template: ./modules/spoke_network.bicep
        parameters: >
          ./action_params/spoke_networking.parameters.json
          spoke_rg="${{ secrets.SPOKE_RG }}"
          location="${{ env.LOCATION }}"
          routeTableName="${{ needs.user_defined_routing.outputs.routeTableName }}"
        deploymentName: spoke-networking-github-actions

  setup_peering:
    needs: [hub_networking, spoke_networking]
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: hub_peering
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/peering.bicep
        parameters: >
          localVnetName="${{ needs.hub_networking.outputs.hubVnetName }}"
          remoteVnetName="${{ needs.spoke_networking.outputs.spokeVnetName }}"
          rgToPeer="${{ secrets.SPOKE_RG }}"
        deploymentName: hub-peering-github-actions

    - name: spoke_peering
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.SPOKE_RG }}
        template: ./modules/peering.bicep
        parameters: >
          localVnetName="${{ needs.spoke_networking.outputs.spokeVnetName }}" 
          remoteVnetName="${{ needs.hub_networking.outputs.hubVnetName }}" 
          rgToPeer="${{ secrets.HUB_RG }}"
        deploymentName: spoke-peering-github-actions

  deploy_aro: 
    needs: spoke_networking
    runs-on: ubuntu-latest
    outputs:
      clusterName: ${{ steps.aro.outputs.clusterName }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: aro_cluster
      uses: azure/arm-deploy@v1
      id: aro
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.SPOKE_RG }}
        template: ./modules/aro_cluster.bicep
        parameters: >
          ./action_params/aro.parameters.json 
          pullSecret="${{ secrets.PULL_SECRET }}"
          location="${{ env.LOCATION }}"
          aadClientId="${{ secrets.AAD_CLIENT_ID }}"
          aadClientSecret="${{ secrets.AAD_CLIENT_SECRET }}"
          aadObjectId="${{ secrets.AAD_OBJECT_ID }}"
          rpObjectId="${{ secrets.ARO_RP_OB_ID }}"
          spokeVnetName="${{ needs.spoke_networking.outputs.spokeVnetName }}"
          addSpRoleAssignment='no'
        deploymentName: aro-github-actions

  write_secrets:
    needs: [vault_and_identity, deploy_aro]
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    
    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ARO cluster details
      run: |
          ARO_PWD="$(az aro list-credentials -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.SPOKE_RG }} --query kubeadminPassword -o tsv)"
          ARO_API="$(az aro show -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.SPOKE_RG }} --query apiserverProfile.url -o tsv)"
          
          echo "ARO_PWD=${ARO_PWD}" >> $GITHUB_ENV
          echo "ARO_API=${ARO_API}" >> $GITHUB_ENV
      shell: bash

    - name: api_secret
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/secret.bicep
        parameters: > 
          keyVaultName="${{ needs.vault_and_identity.outputs.keyVaultName }}"
          secretName="aroApiServer"
          secretValue="${{ env.ARO_API }}"
        deploymentName: secret-github-actions

    - name: kubeadmin_secret
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/secret.bicep
        parameters: > 
          keyVaultName="${{ needs.vault_and_identity.outputs.keyVaultName }}"
          secretName="aroKubeAdminPassword"
          secretValue="${{ env.ARO_PWD }}"
        deploymentName: secret-github-actions

  deploy_bastion:
    needs: hub_networking
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: deploy_bastion
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/bastion.bicep
        parameters: >
          ./action_params/bastion.parameters.json
          location="${{ env.LOCATION }}"
          hubVnetName="${{ needs.hub_networking.outputs.hubVnetName }}"
        deploymentName: bastion-github-actions

  deploy_jumpbox:
    needs: [vault_and_identity, storage_account, hub_networking]
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Identity details
      run: |
          IDENTITY_ID="$(az identity show -n ${{ needs.vault_and_identity.outputs.identityName }} -g ${{ secrets.HUB_RG }} --query id -o tsv)"
          echo "IDENTITY_ID=${IDENTITY_ID}" >> $GITHUB_ENV
      shell: bash

    - name: deploy_jumpbox
      uses: azure/arm-deploy@v1
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/jumpbox.bicep
        parameters: > 
          ./action_params/jumpbox.parameters.json
          location="${{ env.LOCATION }}"
          hubVnetName="${{ needs.hub_networking.outputs.hubVnetName }}"
          adminUsername="${{ secrets.JUMPBOX_ADMIN_USER }}" 
          adminPassword="${{ secrets.JUMPBOX_ADMIN_PWD }}"
          blobEndpoint="${{ needs.storage_account.outputs.blobEndpoint }}"
          blobContainerName="${{ needs.storage_account.outputs.blobContainerName }}"
          fileName="${{ needs.storage_account.outputs.fileName }}"
          identityId="${{ env.IDENTITY_ID }}"
        deploymentName: jumpbox-github-actions

  deploy_acr:
    runs-on: ubuntu-latest
    outputs:
      acrName: ${{ steps.acr.outputs.acrName }}
      loginServer: ${{ steps.acr.outputs.loginServer }}
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: deploy_acr
      uses: azure/arm-deploy@v1
      id: acr
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/acr.bicep
        parameters: > 
          ./action_params/acr.parameters.json
          location="${{ env.LOCATION }}" 
        deploymentName: acr-github-actions

  build_and_push:
    runs-on: ubuntu-latest
    needs: [vault_and_identity, deploy_acr]
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: acr token
      run: |      
          ACR_TOKEN="$(az acr login --name ${{ needs.deploy_acr.outputs.acrName }} --expose-token --query accessToken -o tsv)"
          echo "ACR_TOKEN=${ACR_TOKEN}" >> $GITHUB_ENV
      shell: bash

    - name: login to acr
      uses: azure/docker-login@v1
      with: 
        login-server: ${{ needs.deploy_acr.outputs.loginServer }}
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_TOKEN }}

    - name: build and push container
      run: | 
        docker build . -f ./config_container/Dockerfile -t ${{ needs.deploy_acr.outputs.loginServer }}/${{ env.CONTAINER_BUILD_NAME }}
        docker push ${{ needs.deploy_acr.outputs.loginServer }}/${{ env.CONTAINER_BUILD_NAME }}

  deploy_aci:
    runs-on: ubuntu-latest
    needs: [vault_and_identity, hub_networking, write_secrets, deploy_aro, deploy_acr, build_and_push]
    steps:
    - name: checkout code
      uses: actions/checkout@v3

    - name: azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get ARO cluster details
      run: |
          ARO_PWD="$(az aro list-credentials -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.SPOKE_RG }} --query kubeadminPassword -o tsv)"
          ARO_API="$(az aro show -n ${{ needs.deploy_aro.outputs.clusterName }} -g ${{ secrets.SPOKE_RG }} --query apiserverProfile.url -o tsv)"
          ACR_TOKEN="$(az acr login --name ${{ needs.deploy_acr.outputs.acrName }} --expose-token --query accessToken -o tsv)"
          IDENTITY_ID="$(az identity show -n ${{ needs.vault_and_identity.outputs.identityName }} -g ${{ secrets.HUB_RG }} --query id -o tsv)"

          echo "ARO_PWD=${ARO_PWD}" >> $GITHUB_ENV
          echo "ARO_API=${ARO_API}" >> $GITHUB_ENV
          echo "ACR_TOKEN=${ACR_TOKEN}" >> $GITHUB_ENV
          echo "IDENTITY_ID=${IDENTITY_ID}" >> $GITHUB_ENV
      shell: bash

    - name: deploy_aci
      uses: azure/arm-deploy@v1
      timeout-minutes: 10
      with:
        scope: resourcegroup
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.HUB_RG }}
        template: ./modules/aci.bicep
        parameters: > 
          ./action_params/aci.parameters.json
          location="${{ env.LOCATION }}" 
          loginServer="${{ needs.deploy_acr.outputs.loginServer }}"
          containerBuildName="${{ env.CONTAINER_BUILD_NAME }}"
          aciSubnetName="${{ needs.hub_networking.outputs.aciSubnetName }}"
          hubVnetName="${{ needs.hub_networking.outputs.hubVnetName }}"
          acrToken="${{ env.ACR_TOKEN }}"
          acrUserName="${{ env.ACR_USERNAME }}"
          identityId="${{ env.IDENTITY_ID }}"
          identityClientId="${{ needs.vault_and_identity.outputs.identityClientId }}"
          keyVaultUri="${{ needs.vault_and_identity.outputs.keyVaultUri }}"
        deploymentName: aci-github-actions 